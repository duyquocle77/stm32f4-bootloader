
bootloader-application-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000058c  08008198  08008198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08008724  08008724  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08008724  08008724  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008724  08008724  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008724  08008724  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008724  08008724  00008724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008728  08008728  00008728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800872c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08008738  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08008738  0001002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002396  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000933  00000000  00000000  000123d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  00012d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a0  00000000  00000000  00013010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f82  00000000  00000000  000132b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003be5  00000000  00000000  00027232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e9a4  00000000  00000000  0002ae17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a97bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a48  00000000  00000000  000a980c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008198 <__do_global_dtors_aux>:
 8008198:	b510      	push	{r4, lr}
 800819a:	4c05      	ldr	r4, [pc, #20]	; (80081b0 <__do_global_dtors_aux+0x18>)
 800819c:	7823      	ldrb	r3, [r4, #0]
 800819e:	b933      	cbnz	r3, 80081ae <__do_global_dtors_aux+0x16>
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <__do_global_dtors_aux+0x1c>)
 80081a2:	b113      	cbz	r3, 80081aa <__do_global_dtors_aux+0x12>
 80081a4:	4804      	ldr	r0, [pc, #16]	; (80081b8 <__do_global_dtors_aux+0x20>)
 80081a6:	f3af 8000 	nop.w
 80081aa:	2301      	movs	r3, #1
 80081ac:	7023      	strb	r3, [r4, #0]
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	2000000c 	.word	0x2000000c
 80081b4:	00000000 	.word	0x00000000
 80081b8:	0800870c 	.word	0x0800870c

080081bc <frame_dummy>:
 80081bc:	b508      	push	{r3, lr}
 80081be:	4b03      	ldr	r3, [pc, #12]	; (80081cc <frame_dummy+0x10>)
 80081c0:	b11b      	cbz	r3, 80081ca <frame_dummy+0xe>
 80081c2:	4903      	ldr	r1, [pc, #12]	; (80081d0 <frame_dummy+0x14>)
 80081c4:	4803      	ldr	r0, [pc, #12]	; (80081d4 <frame_dummy+0x18>)
 80081c6:	f3af 8000 	nop.w
 80081ca:	bd08      	pop	{r3, pc}
 80081cc:	00000000 	.word	0x00000000
 80081d0:	20000010 	.word	0x20000010
 80081d4:	0800870c 	.word	0x0800870c

080081d8 <main>:

void gpio_led_init();
void gpio_led_write(uint8_t LED_x, uint8_t value);

int main(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80081dc:	f000 f8f6 	bl	80083cc <HAL_Init>
	gpio_led_init();
 80081e0:	f000 f812 	bl	8008208 <gpio_led_init>

	while (1)
	{
		gpio_led_write(LED_6, 1);
 80081e4:	2101      	movs	r1, #1
 80081e6:	200f      	movs	r0, #15
 80081e8:	f000 f838 	bl	800825c <gpio_led_write>
		HAL_Delay(1000);
 80081ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081f0:	f000 f95e 	bl	80084b0 <HAL_Delay>
		gpio_led_write(LED_6, 0);
 80081f4:	2100      	movs	r1, #0
 80081f6:	200f      	movs	r0, #15
 80081f8:	f000 f830 	bl	800825c <gpio_led_write>
		HAL_Delay(1000);
 80081fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008200:	f000 f956 	bl	80084b0 <HAL_Delay>
		gpio_led_write(LED_6, 1);
 8008204:	e7ee      	b.n	80081e4 <main+0xc>
	...

08008208 <gpio_led_init>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
gpio_led_init() {
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800820e:	2300      	movs	r3, #0
 8008210:	603b      	str	r3, [r7, #0]
 8008212:	4b10      	ldr	r3, [pc, #64]	; (8008254 <gpio_led_init+0x4c>)
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	4a0f      	ldr	r2, [pc, #60]	; (8008254 <gpio_led_init+0x4c>)
 8008218:	f043 0308 	orr.w	r3, r3, #8
 800821c:	6313      	str	r3, [r2, #48]	; 0x30
 800821e:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <gpio_led_init+0x4c>)
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	f003 0308 	and.w	r3, r3, #8
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  uint32_t volatile *const GPIOD_MODER = (uint32_t *)(0x40020c00 + 0x00);
 800822a:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <gpio_led_init+0x50>)
 800822c:	607b      	str	r3, [r7, #4]
  *GPIOD_MODER &= ~(0b11111111<<24);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	601a      	str	r2, [r3, #0]
  *GPIOD_MODER |= (0b01010101<<24);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f043 42aa 	orr.w	r2, r3, #1426063360	; 0x55000000
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40023800 	.word	0x40023800
 8008258:	40020c00 	.word	0x40020c00

0800825c <gpio_led_write>:
 *\param[in]
 *\param[out]
 *\retval
 */
void
gpio_led_write(uint8_t LED_x, uint8_t state) {
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	460a      	mov	r2, r1
 8008266:	71fb      	strb	r3, [r7, #7]
 8008268:	4613      	mov	r3, r2
 800826a:	71bb      	strb	r3, [r7, #6]
	uint32_t volatile *const GPIOD_ODR = (uint32_t *)(0x40020c00 + 0x14);
 800826c:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <gpio_led_write+0x50>)
 800826e:	60fb      	str	r3, [r7, #12]
  if (state == 1) {
 8008270:	79bb      	ldrb	r3, [r7, #6]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d109      	bne.n	800828a <gpio_led_write+0x2e>
	  *GPIOD_ODR |= (1 << LED_x);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	79fa      	ldrb	r2, [r7, #7]
 800827c:	2101      	movs	r1, #1
 800827e:	fa01 f202 	lsl.w	r2, r1, r2
 8008282:	431a      	orrs	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	601a      	str	r2, [r3, #0]
  }
  else {
	  *GPIOD_ODR &= ~(1 << LED_x);
  }
}
 8008288:	e009      	b.n	800829e <gpio_led_write+0x42>
	  *GPIOD_ODR &= ~(1 << LED_x);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	79fa      	ldrb	r2, [r7, #7]
 8008290:	2101      	movs	r1, #1
 8008292:	fa01 f202 	lsl.w	r2, r1, r2
 8008296:	43d2      	mvns	r2, r2
 8008298:	401a      	ands	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	601a      	str	r2, [r3, #0]
}
 800829e:	bf00      	nop
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	40020c14 	.word	0x40020c14

080082b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082b6:	2300      	movs	r3, #0
 80082b8:	607b      	str	r3, [r7, #4]
 80082ba:	4b10      	ldr	r3, [pc, #64]	; (80082fc <HAL_MspInit+0x4c>)
 80082bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082be:	4a0f      	ldr	r2, [pc, #60]	; (80082fc <HAL_MspInit+0x4c>)
 80082c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082c4:	6453      	str	r3, [r2, #68]	; 0x44
 80082c6:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <HAL_MspInit+0x4c>)
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ce:	607b      	str	r3, [r7, #4]
 80082d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80082d2:	2300      	movs	r3, #0
 80082d4:	603b      	str	r3, [r7, #0]
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <HAL_MspInit+0x4c>)
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	4a08      	ldr	r2, [pc, #32]	; (80082fc <HAL_MspInit+0x4c>)
 80082dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e0:	6413      	str	r3, [r2, #64]	; 0x40
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <HAL_MspInit+0x4c>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40023800 	.word	0x40023800

08008300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008300:	b480      	push	{r7}
 8008302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008304:	e7fe      	b.n	8008304 <NMI_Handler+0x4>

08008306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008306:	b480      	push	{r7}
 8008308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800830a:	e7fe      	b.n	800830a <HardFault_Handler+0x4>

0800830c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008310:	e7fe      	b.n	8008310 <MemManage_Handler+0x4>

08008312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008312:	b480      	push	{r7}
 8008314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008316:	e7fe      	b.n	8008316 <BusFault_Handler+0x4>

08008318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008318:	b480      	push	{r7}
 800831a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800831c:	e7fe      	b.n	800831c <UsageFault_Handler+0x4>

0800831e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800831e:	b480      	push	{r7}
 8008320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008322:	bf00      	nop
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008330:	bf00      	nop
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800833a:	b480      	push	{r7}
 800833c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800833e:	bf00      	nop
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800834c:	f000 f890 	bl	8008470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008350:	bf00      	nop
 8008352:	bd80      	pop	{r7, pc}

08008354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <SystemInit+0x20>)
 800835a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835e:	4a05      	ldr	r2, [pc, #20]	; (8008374 <SystemInit+0x20>)
 8008360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008368:	bf00      	nop
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	e000ed00 	.word	0xe000ed00

08008378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80083b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800837c:	480d      	ldr	r0, [pc, #52]	; (80083b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800837e:	490e      	ldr	r1, [pc, #56]	; (80083b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008380:	4a0e      	ldr	r2, [pc, #56]	; (80083bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008384:	e002      	b.n	800838c <LoopCopyDataInit>

08008386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800838a:	3304      	adds	r3, #4

0800838c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800838c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800838e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008390:	d3f9      	bcc.n	8008386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008392:	4a0b      	ldr	r2, [pc, #44]	; (80083c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008394:	4c0b      	ldr	r4, [pc, #44]	; (80083c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008398:	e001      	b.n	800839e <LoopFillZerobss>

0800839a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800839a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800839c:	3204      	adds	r2, #4

0800839e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800839e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083a0:	d3fb      	bcc.n	800839a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80083a2:	f7ff ffd7 	bl	8008354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083a6:	f000 f98d 	bl	80086c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80083aa:	f7ff ff15 	bl	80081d8 <main>
  bx  lr    
 80083ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80083b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80083b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80083bc:	0800872c 	.word	0x0800872c
  ldr r2, =_sbss
 80083c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80083c4:	2000002c 	.word	0x2000002c

080083c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80083c8:	e7fe      	b.n	80083c8 <ADC_IRQHandler>
	...

080083cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80083d0:	4b0e      	ldr	r3, [pc, #56]	; (800840c <HAL_Init+0x40>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a0d      	ldr	r2, [pc, #52]	; (800840c <HAL_Init+0x40>)
 80083d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <HAL_Init+0x40>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a0a      	ldr	r2, [pc, #40]	; (800840c <HAL_Init+0x40>)
 80083e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80083e8:	4b08      	ldr	r3, [pc, #32]	; (800840c <HAL_Init+0x40>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a07      	ldr	r2, [pc, #28]	; (800840c <HAL_Init+0x40>)
 80083ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083f4:	2003      	movs	r0, #3
 80083f6:	f000 f931 	bl	800865c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80083fa:	200f      	movs	r0, #15
 80083fc:	f000 f808 	bl	8008410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008400:	f7ff ff56 	bl	80082b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40023c00 	.word	0x40023c00

08008410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008418:	4b12      	ldr	r3, [pc, #72]	; (8008464 <HAL_InitTick+0x54>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	4b12      	ldr	r3, [pc, #72]	; (8008468 <HAL_InitTick+0x58>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4619      	mov	r1, r3
 8008422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008426:	fbb3 f3f1 	udiv	r3, r3, r1
 800842a:	fbb2 f3f3 	udiv	r3, r2, r3
 800842e:	4618      	mov	r0, r3
 8008430:	f000 f93b 	bl	80086aa <HAL_SYSTICK_Config>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e00e      	b.n	800845c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b0f      	cmp	r3, #15
 8008442:	d80a      	bhi.n	800845a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008444:	2200      	movs	r2, #0
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	f000 f911 	bl	8008672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008450:	4a06      	ldr	r2, [pc, #24]	; (800846c <HAL_InitTick+0x5c>)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e000      	b.n	800845c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000000 	.word	0x20000000
 8008468:	20000008 	.word	0x20000008
 800846c:	20000004 	.word	0x20000004

08008470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008474:	4b06      	ldr	r3, [pc, #24]	; (8008490 <HAL_IncTick+0x20>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	4b06      	ldr	r3, [pc, #24]	; (8008494 <HAL_IncTick+0x24>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4413      	add	r3, r2
 8008480:	4a04      	ldr	r2, [pc, #16]	; (8008494 <HAL_IncTick+0x24>)
 8008482:	6013      	str	r3, [r2, #0]
}
 8008484:	bf00      	nop
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20000008 	.word	0x20000008
 8008494:	20000028 	.word	0x20000028

08008498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
  return uwTick;
 800849c:	4b03      	ldr	r3, [pc, #12]	; (80084ac <HAL_GetTick+0x14>)
 800849e:	681b      	ldr	r3, [r3, #0]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	20000028 	.word	0x20000028

080084b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084b8:	f7ff ffee 	bl	8008498 <HAL_GetTick>
 80084bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c8:	d005      	beq.n	80084d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80084ca:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <HAL_Delay+0x44>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	4413      	add	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80084d6:	bf00      	nop
 80084d8:	f7ff ffde 	bl	8008498 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d8f7      	bhi.n	80084d8 <HAL_Delay+0x28>
  {
  }
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000008 	.word	0x20000008

080084f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <__NVIC_SetPriorityGrouping+0x44>)
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008514:	4013      	ands	r3, r2
 8008516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800852a:	4a04      	ldr	r2, [pc, #16]	; (800853c <__NVIC_SetPriorityGrouping+0x44>)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	60d3      	str	r3, [r2, #12]
}
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	e000ed00 	.word	0xe000ed00

08008540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008544:	4b04      	ldr	r3, [pc, #16]	; (8008558 <__NVIC_GetPriorityGrouping+0x18>)
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	0a1b      	lsrs	r3, r3, #8
 800854a:	f003 0307 	and.w	r3, r3, #7
}
 800854e:	4618      	mov	r0, r3
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	e000ed00 	.word	0xe000ed00

0800855c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800856c:	2b00      	cmp	r3, #0
 800856e:	db0a      	blt.n	8008586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	b2da      	uxtb	r2, r3
 8008574:	490c      	ldr	r1, [pc, #48]	; (80085a8 <__NVIC_SetPriority+0x4c>)
 8008576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800857a:	0112      	lsls	r2, r2, #4
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	440b      	add	r3, r1
 8008580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008584:	e00a      	b.n	800859c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	b2da      	uxtb	r2, r3
 800858a:	4908      	ldr	r1, [pc, #32]	; (80085ac <__NVIC_SetPriority+0x50>)
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	3b04      	subs	r3, #4
 8008594:	0112      	lsls	r2, r2, #4
 8008596:	b2d2      	uxtb	r2, r2
 8008598:	440b      	add	r3, r1
 800859a:	761a      	strb	r2, [r3, #24]
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	e000e100 	.word	0xe000e100
 80085ac:	e000ed00 	.word	0xe000ed00

080085b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b089      	sub	sp, #36	; 0x24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f1c3 0307 	rsb	r3, r3, #7
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	bf28      	it	cs
 80085ce:	2304      	movcs	r3, #4
 80085d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	3304      	adds	r3, #4
 80085d6:	2b06      	cmp	r3, #6
 80085d8:	d902      	bls.n	80085e0 <NVIC_EncodePriority+0x30>
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	3b03      	subs	r3, #3
 80085de:	e000      	b.n	80085e2 <NVIC_EncodePriority+0x32>
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80085e4:	f04f 32ff 	mov.w	r2, #4294967295
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	fa02 f303 	lsl.w	r3, r2, r3
 80085ee:	43da      	mvns	r2, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	401a      	ands	r2, r3
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80085f8:	f04f 31ff 	mov.w	r1, #4294967295
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008602:	43d9      	mvns	r1, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008608:	4313      	orrs	r3, r2
         );
}
 800860a:	4618      	mov	r0, r3
 800860c:	3724      	adds	r7, #36	; 0x24
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
	...

08008618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3b01      	subs	r3, #1
 8008624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008628:	d301      	bcc.n	800862e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800862a:	2301      	movs	r3, #1
 800862c:	e00f      	b.n	800864e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800862e:	4a0a      	ldr	r2, [pc, #40]	; (8008658 <SysTick_Config+0x40>)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3b01      	subs	r3, #1
 8008634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008636:	210f      	movs	r1, #15
 8008638:	f04f 30ff 	mov.w	r0, #4294967295
 800863c:	f7ff ff8e 	bl	800855c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <SysTick_Config+0x40>)
 8008642:	2200      	movs	r2, #0
 8008644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008646:	4b04      	ldr	r3, [pc, #16]	; (8008658 <SysTick_Config+0x40>)
 8008648:	2207      	movs	r2, #7
 800864a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	e000e010 	.word	0xe000e010

0800865c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff ff47 	bl	80084f8 <__NVIC_SetPriorityGrouping>
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008672:	b580      	push	{r7, lr}
 8008674:	b086      	sub	sp, #24
 8008676:	af00      	add	r7, sp, #0
 8008678:	4603      	mov	r3, r0
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008684:	f7ff ff5c 	bl	8008540 <__NVIC_GetPriorityGrouping>
 8008688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	6978      	ldr	r0, [r7, #20]
 8008690:	f7ff ff8e 	bl	80085b0 <NVIC_EncodePriority>
 8008694:	4602      	mov	r2, r0
 8008696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800869a:	4611      	mov	r1, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff ff5d 	bl	800855c <__NVIC_SetPriority>
}
 80086a2:	bf00      	nop
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff ffb0 	bl	8008618 <SysTick_Config>
 80086b8:	4603      	mov	r3, r0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <__libc_init_array>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	4d0d      	ldr	r5, [pc, #52]	; (80086fc <__libc_init_array+0x38>)
 80086c8:	4c0d      	ldr	r4, [pc, #52]	; (8008700 <__libc_init_array+0x3c>)
 80086ca:	1b64      	subs	r4, r4, r5
 80086cc:	10a4      	asrs	r4, r4, #2
 80086ce:	2600      	movs	r6, #0
 80086d0:	42a6      	cmp	r6, r4
 80086d2:	d109      	bne.n	80086e8 <__libc_init_array+0x24>
 80086d4:	4d0b      	ldr	r5, [pc, #44]	; (8008704 <__libc_init_array+0x40>)
 80086d6:	4c0c      	ldr	r4, [pc, #48]	; (8008708 <__libc_init_array+0x44>)
 80086d8:	f000 f818 	bl	800870c <_init>
 80086dc:	1b64      	subs	r4, r4, r5
 80086de:	10a4      	asrs	r4, r4, #2
 80086e0:	2600      	movs	r6, #0
 80086e2:	42a6      	cmp	r6, r4
 80086e4:	d105      	bne.n	80086f2 <__libc_init_array+0x2e>
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ec:	4798      	blx	r3
 80086ee:	3601      	adds	r6, #1
 80086f0:	e7ee      	b.n	80086d0 <__libc_init_array+0xc>
 80086f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f6:	4798      	blx	r3
 80086f8:	3601      	adds	r6, #1
 80086fa:	e7f2      	b.n	80086e2 <__libc_init_array+0x1e>
 80086fc:	08008724 	.word	0x08008724
 8008700:	08008724 	.word	0x08008724
 8008704:	08008724 	.word	0x08008724
 8008708:	08008728 	.word	0x08008728

0800870c <_init>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	bf00      	nop
 8008710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008712:	bc08      	pop	{r3}
 8008714:	469e      	mov	lr, r3
 8008716:	4770      	bx	lr

08008718 <_fini>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr
